#!/bin/bash

ME=$$
MEDIA=
PRG=`basename $0`
DEVICE="$DEVNAME"

# Configurable variables/parameters etc.
[ -f /etc/dsc-trg.conf ] && . /etc/dsc-trg.conf

generic_mount() {
	local -r u=`id -u ${USR}`
	local -r g=`id -g ${GRP}`

	[ ${NO_MOUNT} -eq 1 ] && return 0

	check_fs "/media/${MEDIA}" && return 1
	mount -o ro,nosuid,nodev,user,umask=0077,uid=${u},gid=${g} \
		${DEVICE} /media/${MEDIA}

	return $?
}

generic_umount() {
	[ ${NO_EJECT} -eq 1 ] && return 0

	check_fs "/media/${MEDIA}" && umount "/media/${MEDIA}"
	eject "${DEVICE}"

	return $?
}

classify_titles() {
	if [ "${CATEGORY}" = "tv" ]
	then
		TITLES=(`blutit ${BLUTIT_OPTS[@]} -e "$1"`)
	else
		TITLES[0]=`blutit ${BLUTIT_OPTS[@]} "$1"`
	fi
}

bad_disc_label() {
	local r=0
	[ "x${ID_FS_LABEL}" = "x" ] && return 1 # Empty

	case "${ID_FS_LABEL}" in
	'DVD_VIDEO'|'DVDVIDEO')
		r=1
		;;
	esac

	echo -n $r
}

new_disc_label() {
	local n="`blutit ${BLUTIT_OPTS[@]} -n $1 | tr ', ' '_'`"
	[ "x$n" != "x" ] && echo "$n" || echo "$ID_FS_LABEL"
}

identify_titles() {
	local t="${TMP}/${MEDIA}.nfo"

	if [ ${#TITLES[@]} -eq 0 ] || [ `bad_disc_label` -eq 1 ]
	then
		makemkvcon "${MAKEMKVCON_OPTS[@]}" -r info dev:${DEVICE} 1> "$t"
		[ $? -eq 0 ] || return 1

		# If no titles have been set, locate the single main feature on disc
		if [ ${#TITLES[@]} -eq 0 ]
		then
			classify_titles "$t"
		fi

		# If the disc label is shite, attempt to retrieve it from file
		if [ `bad_disc_label` -eq 1 ]
		then
			ID_FS_LABEL="`new_disc_label $t`"
		fi
	fi
}

find_mkv() {
	find "$1" -maxdepth 1 -type f -name '*.mkv'
}

confirm_rip() {
	local -i n=`tail -n1 "$1" | grep -c '^Copy complete. 1 titles saved.$'`
	[ $n -eq 1 ] && [ -s "`find_mkv $2`" ] && return 0
}

extract_title() {
	local f="${TMP}/rip.log"

	nice -n ${EXTRACT_PRIORITY} \
	makemkvcon "${MAKEMKVCON_OPTS[@]}" mkv \
	dev:${DEVICE} "${1}" "$2" 2>&1 | tee "$f"

	confirm_rip "$f" "$2" || return 1
	touch "$2/${CATEGORY}.q"
}

extract_titles() {
	local p="${QUEUE_DIR}/${ID_FS_LABEL}"

	for t in ${TITLES[@]}
	do
		mkdir -p "$p/$t" || return 1
		extract_title "$t" "${p}/${t}" || return 1
	done
}

embed_encoder_opts() {
# Do this in a sub-shell as we don't want to pollute the environment ;)
(
	. /etc/abcde.conf
	find "$1" -type f -name '*.mp3' -print0 \
	| xargs -0 -- eyeD3 -2 --comment "eng:Encoder:${ENCODERVERSION} ${ENCODEROPTS}"
)
}

embed_album_art() {
	cd "$1" && cd ../ && embed-album-art "${1##*/}"
}

tag_audio_files() {
	# The mindepth must match the path structure in abcde.conf
	local p="`find $1 -depth -mindepth 2 -type d -newer $2`"
	embed_encoder_opts "$p" && embed_album_art "$p"
}

extract_and_encode_tracks() {
	local t="${TMP}/epoch"

	touch "$t" || return 1
	nice -n ${EXTRACT_PRIORITY} \
	abcde -N -d "${DEVICE}" && tag_audio_files "$p" "$t"
}

rip_audio() {
	local p="$MUSIC_MNT"

	check_fs "$p" && extract_and_encode_tracks
}

rip_video() {
	local p="$VIDEO_MNT"

	check_fs "$p" && identify_titles && extract_titles && generic_umount
}

sleep 2

if [ "$ID_CDROM_MEDIA_BD" = "1" ]
then
	MEDIA=bluray
  	(
	generic_mount || exit 1
	prologue "$PRG" && rip_video && epilogue "$PRG"
	) > ${TMP}/${PRG}.${ME} 2>&1 &
elif [ "$ID_CDROM_MEDIA_DVD" = "1" ]
then
	MEDIA=dvd
	(
	generic_mount || exit 1
	prologue "$PRG" && rip_video && epilogue "$PRG"
	) > ${TMP}/${PRG}.${ME} 2>&1 &
elif [ "$ID_CDROM_MEDIA_CD" = "1" ]
then
	NO_MOUNT=1
	NO_EJECT=1
	MEDIA=cdrom
	(
	generic_mount || exit 1
	prologue "$PRG" && rip_audio && epilogue "$PRG"
	) > ${TMP}/${PRG}.${ME} 2>&1 &
fi
